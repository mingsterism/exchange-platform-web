import "firebase/firestore";
import { profileCollection } from "./firebase";

export const getUserProducts = async (userId) => {
  const listOfDocument = profileCollection.doc(userId).collection("products");
  const getList = await listOfDocument.get();
  const docContainer = [];
  getList.forEach((docs) => {
    const product = docs.data();
    // console.log(product);
    docContainer.push(product);
  });
  // console.log(docContainer);
  return docContainer;
};

// export const getSpecificProduct = async (uid, prodID) => {
//   // const user = firebase.auth().currentUser;
//   const productDoc = await profileCollection
//     .doc(uid)
//     .collection("products")
//     .doc(prodID)
//     .get();
//   const productData = productDoc.data();
//   console.log(productData);
//   console.log("Product name: ", productData.name);
//   return productData;
// };

export const createProduct = async (uid, productDetails) => {
  //   const user = firebase.auth().currentUser;
  // console.log("in createProduct: ", user.uid);
  await profileCollection
    .doc(uid) // with the ID from the root collection
    .collection("products") // access to the subcollection
    .doc(productDetails.id)
    .set(productDetails); // add data into the subcollection with an autogenerated ID
  return console.log(
    profileCollection
      .doc(uid)
      .collection("products")
      .doc(productDetails.id)
      .get()
  );
};

export const deleteProduct = async (uid, productId) => {
  //   const user = firebase.auth().currentUser;
  const getProduct = profileCollection
    .doc(uid)
    .collection("products")
    .doc(productId);
  // console.log(getProduct.id);
  await getProduct.delete();
  if (getProduct !== "") {
    console.log("sucessfully delete product: ", getProduct);
  } else {
    console.log("Could not delete the product!");
  }
};

export const updateProductDoc = async (userId, newProdDetails, prodId) => {
  console.log(newProdDetails);
  console.log("user id: ", userId, " prodId: ", prodId);
  const productDocument = profileCollection
    .doc(userId)
    .collection("products")
    .doc(String(prodId));
  return productDocument
    .update({
      name: newProdDetails.name,
      quantity: Number(newProdDetails.quantity),
      conditions: newProdDetails.conditions,
      description: newProdDetails.description,
    })
    .catch((err) => console.log(err));
};

export const updateProductPhotos = async (uid, productPhotos, prodId) => {
  const productDocument = profileCollection
    .doc(uid)
    .collection("products")
    .doc(prodId);
  return productDocument.update({
    photos: productPhotos,
  });
};
